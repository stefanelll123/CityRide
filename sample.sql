DELETE FROM issues;
COMMIT;
SELECT ID FROM BICYCLES "b";

select i.id, i.BICYCLE_ID AS bicycle_id from ISSUES i 
            where (SELECT COUNT(*) AS count FROM ISSUES i1 WHERE i1.BICYCLE_ID = i.ID AND i1.SEVERITY = 'low') < 3;

INSERT INTO ISSUES (REGISTRATION_DATE, DESCRIPTION, SEVERITY, TYPE_ISSUE, BICYCLE_ID) 
        VALUES  (CURRENT_TIMESTAMP, 'Bicicleta necesa revizie.', 'medium', 'notification_mentenance', 1);

SELECT * FROM ISSUES WHERE TYPE_ISSUE = 'notification_mentenance';


SELECT COUNT(*) FROM PICKUP_POINTS "pp";

SELECT CURRENT_TIMESTAMP(6) - INTERVAL '1' MONTH FROM dual;

COMMIT;

BEGIN
  populate_move_bicycle(100);
  COMMIT;
END;
/

SELECT COUNT(*) FROM MOVE_BICYCLE "mb";

ROLLBACK;

UPDATE BICYCLES
  SET POINT_ID = 3
  WHERE id = 1;
  COMMIT;


declare
  v_date TIMESTAMP(6) := CURRENT_TIMESTAMP() - INTERVAL '4' MONTH;
  v_date_start TIMESTAMP(6) := v_date - INTERVAL '1' MONTH ;
  v_count INTEGER;
  v_point NUMBER(38, 0) := 1;
BEGIN
  SELECT COUNT(*) INTO v_count FROM BICYCLES b JOIN BORROW b1 ON b.id = b1.BICYCLE_ID 
    WHERE b1.BORROW_DATE > V_DATE_START    
      AND b1.END_DATE < V_DATE_START + INTERVAL '1' DAY
      AND (SELECT COUNT(*) FROM MOVE_BICYCLE mb 
        WHERE MB.BICYCLE_ID = b1.BICYCLE_ID 
          AND mb.FROM_POINT_ID = v_point 
          AND (MB.MOVE_DATE > b1.END_DATE - INTERVAL '5' SECOND AND MB.MOVE_DATE < b1.END_DATE + INTERVAL '5' SECOND)) > 0;

  DBMS_OUTPUT.PUT_LINE(V_COUNT);
END;


DECLARE
    TYPE point_valueble IS TABLE OF NUMBER(5,2) INDEX BY BINARY_INTEGER;
    v_tavle POINT_VALUEBLE;
BEGIN
      v_tavle(1) := 5;
    IF v_tavle.EXISTS(1) THEN
      v_tavle(1) := 10;
      DBMS_OUTPUT.PUT_LINE(v_tavle(1));
    END IF;
END;


SELECT city_ride_login_package.create_account('string','string','string','string','string','string','string',2019-05-26,0) from dual


SELECT CITY_RIDE_LOGIN_PACKAGE.CREATE_ACCOUNT('string','string','string','string','string','string','string',TO_DATE('2003/07/09', 'yyyy/mm/dd'),1) FROM dual;

  CREATE OR REPLACE FUNCTION create_account_1 (FIRST_NAME VARCHAR2, LAST_NAME  VARCHAR2, EMAIL VARCHAR2, CNP VARCHAR2, ADDRESS VARCHAR2, PASSWORD VARCHAR2, CARD_NUMBER VARCHAR2, EXPIRATION_DATE DATE, CVV NUMBER)
  RETURN BOOLEAN IS
    v_user_id NUMBER(38, 0);
  BEGIN
    INSERT INTO USERS(FIRST_NAME, LAST_NAME, EMAIL, CNP, ADDRESS, PASSWORD, ROLE) VALUES (FIRST_NAME, LAST_NAME, EMAIL, TO_NUMBER(CNP),  ADDRESS, PASSWORD, 'user');
    SELECT id INTO v_user_id FROM USERS u WHERE u.email = EMAIL;

    INSERT INTO DEBIT_CARD(USER_ID, CARD_NUMBER, EXPIRATION_DATE, CVV) VALUES (v_user_id, TO_NUMBER(CARD_NUMBER), EXPIRATION_DATE, CVV);
      RETURN TRUE;
    EXCEPTION WHEN OTHERS THEN
      RETURN FALSE;
  END;


SELECT city_ride_login_package.create_account('string','string','string@gmail.com','1234567890123','string','string','1234567890123456',TO_DATE('2019/05/26', 'yyyy/mm/dd'),123) from dual;

DELETE FROM DEBIT_CARD WHERE CARD_NUMBER = 1234567890123456;
DELETE FROM USERS WHERE email = 'string@gmail.com';
COMMIT;

    INSERT INTO USERS(FIRST_NAME, LAST_NAME, EMAIL, CNP, ADDRESS, PASSWORD, ROLE) VALUES ('string','string','string@gmail.com','1234567890123','string','string', 'user');

SELECT id  FROM USERS u WHERE u.email = 'string@gmail.com';


    INSERT INTO DEBIT_CARD(USER_ID, CARD_NUMBER, EXPIRATION_DATE, CVV) VALUES (10005, TO_NUMBER('1234567890123456'), TO_DATE('2019/05/26', 'yyyy/mm/dd'),123);

  CREATE OR replace FUNCTION login1 (email VARCHAR2, password VARCHAR2)
  RETURN NUMBER IS
    v_count NUMBER;
    v_id NUMBER := -1;
  BEGIN
    -- TODO: adauga criptare la parola
    SELECT COUNT(*) INTO v_count FROM USERS u WHERE u.EMAIL = EMAIL AND u.PASSWORD = PASSWORD;
    DBMS_OUTPUT.PUT_LINE(v_count);
    IF(v_count = 0) THEN
      RETURN V_ID;
    END IF;

    SELECT id INTO V_ID FROM USERS u WHERE u.EMAIL = EMAIL AND u.PASSWORD = PASSWORD AND ROWNUM = 1;
    RETURN V_ID;
  END login1;





select city_ride_login_package.login('string', 'string') from dual;
SELECT id FROM USERS u WHERE U.EMAIL = 'string@gmail.com' AND u.PASSWORD = 'string';



UPDATE PRICES SET END_DATE = NULL WHERE id = 221;
COMMIT;

SELECT u.ID FROM users u WHERE (SELECT COUNT(*) FROM BORROW b WHERE b.USER_ID = u.ID AND B.END_DATE != null) > 0;


SELECT CITY_RIDE_BORROW_PACKAGE.check_borrow_bicycle(2590, '1JRNL6917ZETRQOPS2UAZ9L5ZK6YIW3UV88B5FZSDWYH8025CW76AZJ03YM42CW37M5W6NI6ZSR8ANBCHE5SWMVZ6UG7SVWLJ3DFOKBCPZEKNUCKCRWZYS2EGL4YJERJW5NZ8NO6DKDJG8KJLC6QNYZ0OIE7Z3VL52JWH1RQC9IE0MY2XBP7DRJLO178QJRINXFY9B9X')
  FROM dual;

SELECT CITY_RIDE_BORROW_PACKAGE.check_borrow_bicycle(6129, 'WZA44I7OT2CMBBZ5D3Y1FD7BE2ZEKN8INBL1X75C3UZ0ULZ15JFM065B19JP6G6GDYO9I4IHXX1AZ7CKLF0LUETPL4R4NCTHSO9DQII3GHW0EIWNPKB0VZ6Z2FD6HCZPMBNQQVO2WXM8XPCAP24JC0HV3NJ7VIT3SKQ4EKPLHX9TPIARIIPTCGLPZ6YLEI5PHCCC91W7')
  FROM dual;

exec CITY_RIDE_BORROW_PACKAGE.borrow_bicycle(6129, 'WZA44I7OT2CMBBZ5D3Y1FD7BE2ZEKN8INBL1X75C3UZ0ULZ15JFM065B19JP6G6GDYO9I4IHXX1AZ7CKLF0LUETPL4R4NCTHSO9DQII3GHW0EIWNPKB0VZ6Z2FD6HCZPMBNQQVO2WXM8XPCAP24JC0HV3NJ7VIT3SKQ4EKPLHX9TPIARIIPTCGLPZ6YLEI5PHCCC91W7');


SELECT u.id, b.BICYCLE_ID FROM USERS u JOIN BORROW b ON u.ID = b.USER_ID where b.END_DATE IS NOT NULL;


EXEC CITY_RIDE_BORROW_PACKAGE.RETURN_BICYCLE(1);
SELECT COUNT(*) FROM BORROW b WHERE b.USER_ID = 6071 AND B.END_DATE IS NULL;

SELECT STATUS FROM BICYCLES WHERE id = 663;


SELECT B.ID, B.BICYCLE_ID FROM BORROW b WHERE B.USER_ID = 6071 AND B.END_DATE IS NULL;

SELECT * FROM BORROW WHERE USER_ID = 6071;

SELECT * FROM BORROW WHERE USER_ID = 1;
SELECT * FROM BORROW WHERE USER_ID = 19;
SELECT * FROM USERS WHERE Id = 19;
SELECT * FROM BICYCLES WHERE ID = 3530;


COMMIT;


SELECT CITY_RIDE_PACKAGE.CALCULATES_PAID(2796) FROM dual;


  CREATE OR REPLACE function calculates_paid1(borrow_id borrow.id%type) return number IS
    v_number_of_hours NUMBER(5,0);
    v_price NUMBER(5,0);
  BEGIN
    SELECT to_number(24 * (SYSDATE - borrow_date)) INTO V_NUMBER_OF_HOURS FROM BORROW WHERE id = BORROW_ID;
    SELECT p.value INTO v_price FROM BORROW b JOIN PRICES p ON p.id = b.PRICE_ID WHERE ROWNUM = 1;
    IF(V_NUMBER_OF_HOURS < 3) THEN 
      RETURN 3 * V_PRICE;
    END IF;

    RETURN V_NUMBER_OF_HOURS * V_PRICE;
  END calculates_paid1;

SELECT to_number(EXTRACT(DAY FROM 24 * (SYSDATE - borrow_date))) FROM BORROW WHERE id = 1;

SELECT * FROM TABLE(CITY_RIDE_PACKAGE.get_bicycle_problems_reported(1));

SELECT CITY_RIDE_PACKAGE.get_bicycle_problems_reported(1) FROM dual;





